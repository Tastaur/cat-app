{"version":3,"sources":["API/api.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","baseURL","headers","catApi","get","then","response","data","initialState","url","firstChange","reducers","combineReducers","cat","state","action","type","change","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","AppContainer","connect","getCatUrl","dispatch","a","props","className","src","onClick","CatApp","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4RAEMA,E,MAAWC,OAAa,CAC5BC,QAAQ,6CACRC,QAAS,CACP,YAAa,0CAIJC,EAAS,WAElB,OAAOJ,EAASK,MAAMC,MAAK,SAAAC,GACzB,OAAOA,EAASC,S,QCPhBC,EAAe,CACnBC,IAAK,KACLC,aAAa,GA4BTC,EAAWC,YAAgB,CAC7BC,IA1Be,WAAiC,IAAhCC,EAA+B,uDAAvBN,EAAcO,EAAS,uCACjD,OAAQA,EAAOC,MACb,IARgB,kBASd,OAAO,eACFF,EADL,CAEEL,IAAKM,EAAON,IACZC,YAAaK,EAAOE,SAGxB,QAAS,OAAOH,MAqBdI,EAAmBC,OAAOC,sCAAwCC,IAIzDC,EAHDC,YAAYZ,EAAUO,EAChCM,YAAgBC,OC1BdC,EAAeC,aAHG,SAACb,GACvB,MAAO,CAACD,IAAKC,EAAMD,OAEyB,CAACe,UDStB,yDAAM,WAAOC,GAAP,eAAAC,EAAA,sEACZ3B,IADY,OACzBI,EADyB,OAE3BsB,EAJsC,CAACb,KAnBvB,kBAmB0CP,IAIvCF,EAAK,GAAKE,IAJkCQ,QAI7B,IAFP,2CAAN,wDCTJU,EAXT,SAACI,GAAD,OACR,yBAAKC,UAAU,OACb,yBAAKC,IAAKF,EAAMlB,IAAIJ,MACnBsB,EAAMlB,IAAIH,YAAc,4BAAQwB,QAASH,EAAMH,WAAvB,cACrB,4BAAQM,QAASH,EAAMH,WAAvB,mBAcKO,EALA,SAACJ,GACd,OAAO,kBAAC,IAAD,CAAUT,MAAOA,GACtB,kBAACI,EAAD,QCRgBU,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD4HjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ce21dc1b.chunk.js","sourcesContent":["import * as axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: `https://api.thecatapi.com/v1/images/search`,\r\n  headers: {\r\n    'x-api-key': 'cf4f9bc6-242b-45ad-bb93-b920df9277f4',\r\n  },\r\n})\r\n\r\nexport const catApi = {\r\n  getCat() {\r\n    return instance.get().then(response => {\r\n      return response.data\r\n    })\r\n  },\r\n}\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux'\nimport {catApi} from '../API/api'\nimport thunkMiddleware from 'redux-thunk'\n\nconst SET_CAT_URL = 'cat/SET_CAT_URL'\nconst initialState = {\n  url: null,\n  firstChange: true,\n}\n\nconst catReducer = (state = initialState, action)=>{\n  switch (action.type) {\n    case SET_CAT_URL:{\n      return {\n        ...state,\n        url: action.url,\n        firstChange: action.change,\n      }\n    }\n    default: return state\n  }\n}\n\nexport const setCatUrl = (url,change) => ({type: SET_CAT_URL, url, change})\n\nexport const getCatUrl = () => async (dispatch) => {\n  let data = await catApi.getCat()\n    dispatch(setCatUrl(data['0'].url, false))\n}\n\n\n\n\n\n\nconst reducers = combineReducers({\n    cat: catReducer,\n    }\n)\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n));\nexport default store\n","import React from 'react'\nimport './App.css'\nimport {connect, Provider} from 'react-redux'\nimport store, {getCatUrl} from './store/store'\n\nconst App = (props) => (\n    <div className=\"App\">\n      <img src={props.cat.url}/>\n      {props.cat.firstChange ? <button onClick={props.getCatUrl}> Get kitty</button> :\n          <button onClick={props.getCatUrl}> More kitty</button>}\n    </div>\n)\n\nconst mapStateToProps = (state) => {\n  return {cat: state.cat}\n}\nconst AppContainer = connect(mapStateToProps, {getCatUrl})(App)\n\nconst CatApp = (props) => {\n  return <Provider store={store}>\n    <AppContainer/>\n  </Provider>\n}\nexport default CatApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport CatApp from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <CatApp/>, document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}